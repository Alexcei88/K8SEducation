// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OTUS.HomeWork.WarehouseService.DAL;

namespace OTUS.HomeWork.WarehouseService.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20210608192229_addProductCategoryColumn")]
    partial class addProductCategoryColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("OTUS.HomeWork.WarehouseService.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Space")
                        .HasColumnType("double precision")
                        .HasColumnName("space");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_products_category");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d70af059-b117-4b8a-ae66-85a96647c6a8"),
                            BasePrice = 100m,
                            Category = "Инвертарь",
                            Description = "",
                            Name = "Футбольный Мяч",
                            Space = 1.0,
                            Weight = 2.0
                        },
                        new
                        {
                            Id = new Guid("5f386403-d370-4c06-87e5-f9413ae732fd"),
                            BasePrice = 400m,
                            Category = "Инвентарь",
                            Description = "",
                            Name = "Футбольная сетка",
                            Space = 0.5,
                            Weight = 1.5
                        },
                        new
                        {
                            Id = new Guid("b290b26b-e8da-4549-a34c-20145a17e98d"),
                            BasePrice = 20m,
                            Category = "Одежда",
                            Description = "",
                            Name = "Футболка",
                            Space = 0.10000000000000001,
                            Weight = 0.69999999999999996
                        },
                        new
                        {
                            Id = new Guid("745333a0-f931-48b8-be2b-250e2dba9a69"),
                            BasePrice = 20m,
                            Category = "Одежда",
                            Description = "",
                            Name = "Шорты",
                            Space = 0.10000000000000001,
                            Weight = 0.40000000000000002
                        },
                        new
                        {
                            Id = new Guid("76579bed-d0b7-43c4-a5e0-62672beed9fc"),
                            BasePrice = 20m,
                            Category = "Обувь",
                            Description = "",
                            Name = "Бутсы",
                            Space = 0.10000000000000001,
                            Weight = 0.40000000000000002
                        },
                        new
                        {
                            Id = new Guid("db607615-e366-4294-92d8-768c3042cf89"),
                            BasePrice = 10m,
                            Category = "Инвентарь",
                            Description = "",
                            Name = "Футбольные фишки",
                            Space = 1.5,
                            Weight = 0.29999999999999999
                        });
                });

            modelBuilder.Entity("OTUS.HomeWork.WarehouseService.Domain.ProductCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<long>("RemainCount")
                        .HasColumnType("bigint")
                        .HasColumnName("remain_count");

                    b.Property<long>("ReserveCount")
                        .HasColumnType("bigint")
                        .HasColumnName("reserve_count");

                    b.Property<long>("SoldCount")
                        .HasColumnType("bigint")
                        .HasColumnName("sold_count");

                    b.HasKey("Id")
                        .HasName("pk_counters");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_counters_product_id");

                    b.ToTable("counters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ab4c572-1bc7-4f5e-a59f-8213c410c55a"),
                            ProductId = new Guid("d70af059-b117-4b8a-ae66-85a96647c6a8"),
                            RemainCount = 100L,
                            ReserveCount = 0L,
                            SoldCount = 0L
                        },
                        new
                        {
                            Id = new Guid("a0e09eac-e2db-42f8-887d-43694cf4db99"),
                            ProductId = new Guid("5f386403-d370-4c06-87e5-f9413ae732fd"),
                            RemainCount = 50L,
                            ReserveCount = 0L,
                            SoldCount = 0L
                        },
                        new
                        {
                            Id = new Guid("4bcd8092-5d40-4e25-a96e-a8e0b1eed09e"),
                            ProductId = new Guid("b290b26b-e8da-4549-a34c-20145a17e98d"),
                            RemainCount = 20L,
                            ReserveCount = 4L,
                            SoldCount = 0L
                        },
                        new
                        {
                            Id = new Guid("463249bd-4b40-42f1-b3c3-bb04e921a8e7"),
                            ProductId = new Guid("745333a0-f931-48b8-be2b-250e2dba9a69"),
                            RemainCount = 25L,
                            ReserveCount = 1L,
                            SoldCount = 3L
                        },
                        new
                        {
                            Id = new Guid("28b0c05d-2a12-441b-952f-105aa7cae747"),
                            ProductId = new Guid("76579bed-d0b7-43c4-a5e0-62672beed9fc"),
                            RemainCount = 25L,
                            ReserveCount = 1L,
                            SoldCount = 3L
                        },
                        new
                        {
                            Id = new Guid("ed7080b6-04e8-4cbd-8260-2b9efb4c28c5"),
                            ProductId = new Guid("db607615-e366-4294-92d8-768c3042cf89"),
                            RemainCount = 25L,
                            ReserveCount = 1L,
                            SoldCount = 3L
                        });
                });

            modelBuilder.Entity("OTUS.HomeWork.WarehouseService.Domain.ReserveProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<DateTime>("ReserveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reserve_date");

                    b.HasKey("ProductId", "OrderNumber")
                        .HasName("pk_reserves");

                    b.ToTable("reserves");
                });

            modelBuilder.Entity("OTUS.HomeWork.WarehouseService.Domain.ShipmentOrder", b =>
                {
                    b.Property<string>("OrderNumber")
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<string>("ErrorDescription")
                        .HasColumnType("text")
                        .HasColumnName("error_description");

                    b.Property<List<Guid>>("ProductIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("product_ids");

                    b.Property<DateTime>("ReadyToShipmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ready_to_shipment_date");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("shipment_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("WasCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("was_cancelled");

                    b.HasKey("OrderNumber")
                        .HasName("pk_shipments");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("OTUS.HomeWork.WarehouseService.Domain.ProductCounter", b =>
                {
                    b.HasOne("OTUS.HomeWork.WarehouseService.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_counters_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OTUS.HomeWork.WarehouseService.Domain.ReserveProduct", b =>
                {
                    b.HasOne("OTUS.HomeWork.WarehouseService.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_reserves_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}

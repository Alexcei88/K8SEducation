// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import "./libs/shim/expect.js";
import URI from "./libs/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    baseUrl: "http://arch.homework:80",
    baseUrlD: "http://localhost:5020",
    eshopBaseUrl: "http://arch.homework:80/eshop",
    eshopBaseUrlD: "http://localhost:5020",
    billingBaseUrl: "http://arch.homework:80/billing",
    billingBaseUrlD: "http://localhost:5010",
    notificationBaseUrl: "http://arch.homework:80/notification",
    notificationBaseUrlD: "http://localhost:5030",
    warehouseBaseUrl: "http://arch.homework:80/warehouse",
    warehouseBaseUrlD: "http://localhost:5050",
    passwordUser1: "",
    email: "",
    login: "",
    phone: "",
    password: "",
    userName: "",
    userId1: "",
    balance: "",
    product1: "",
    product2: "",
    product3: "",
    product4: "",
    idempotencyKey: "",
    product1quantity: "",
    product2quantity: "",
    product3quantity: "",
    product4quantity: "",
    quantity2: "",
    quantity3: "",
    deliveryAddress: "",
    orderNumber: "",
    billingId: "",
    paymentDateUtc: "",
    product2OrderQuantity: "",
    product3OrderQuantity: "",
    firstCategory: ""
  }
});

export default function() {
  postman[Request]({
    name: "signin",
    id: "653d009a-76a4-4f87-8b0f-efb5e4deb726",
    method: "PUT",
    address: "{{baseUrl}}/signin",
    post(response) {
      pm.test("user registered successfully", function() {
        pm.collectionVariables.get("variable_key");
        var jsonData = JSON.parse(responseBody);
        pm.collectionVariables.set("userId1", jsonData.userId),
          pm.response.to.have.status(200);
      });
    }
  });

  postman[Request]({
    name: "getBucket",
    id: "4013bf4c-cc55-4316-b5c1-7dd001a55adf",
    method: "GET",
    address: "{{eshopBaseUrl}}/api/bucket/{{userId1}}",
    headers: {
      host: "arch.homework",
      "X-Custom-Authentification":
        "eyJVc2VySWQiOiJjNjk0ZDQxMi1iMGQ3LTQxNTAtOWM1My04MTQxYzExZmNmNmYiLCJFeHBpcmVkVVRDRGF0ZVRpbWUiOiIyMDIxLTAyLTIyVDIwOjA0OjE5Ljc0MTg2MDNaIn0="
    },
    post(response) {
      pm.test("empty bucket", function() {
        pm.response.to.have.status(200);

        const responseJson = pm.response.json();
        pm.expect(responseJson.items).to.eql([]);
      });
    }
  });

  postman[Request]({
    name: "getProducts",
    id: "84e44254-3728-42e8-8584-fc7b4c3efed7",
    method: "GET",
    address: "{{warehouseBaseUrl}}/api/product",
    data: {},
    headers: {
      host: "arch.homework"
    },
    post(response) {
      var jsonData = JSON.parse(responseBody);
      pm.collectionVariables.set("product1", jsonData[0]["id"]);
      pm.collectionVariables.set("product2", jsonData[1]["id"]);
      pm.collectionVariables.set("product3", jsonData[2]["id"]);
      pm.collectionVariables.set("product4", jsonData[3]["id"]);

      pm.collectionVariables.set(
        "product1quantity",
        jsonData[0]["remainCount"]
      );
      pm.collectionVariables.set(
        "product2quantity",
        jsonData[1]["remainCount"]
      );
      pm.collectionVariables.set(
        "product3quantity",
        jsonData[2]["remainCount"]
      );
      pm.collectionVariables.set(
        "product4quantity",
        jsonData[3]["remainCount"]
      );

      pm.test("get product list successfully", function() {
        pm.response.to.have.status(200);

        var template = pm.response.text(); // save your html response in the template and then
        pm.visualizer.set(template); // set that template to pm.visualizer
      });
    }
  });

  postman[Request]({
    name: "getProductCategories",
    id: "e1a71243-2744-41e2-b67b-5c24af04f7e0",
    method: "GET",
    address: "{{warehouseBaseUrl}}/api/product/categories",
    data: {},
    headers: {
      host: "arch.homework"
    },
    post(response) {
      var jsonData = JSON.parse(responseBody);
      pm.collectionVariables.set("firstCategory", jsonData[0]["name"]);

      pm.test("get product categories list successfully", function() {
        pm.response.to.have.status(200);
      });
    }
  });

  postman[Request]({
    name: "filterProducts",
    id: "dd180fe9-e2b7-4c05-996a-0ed2c476837e",
    method: "GET",
    address: "{{warehouseBaseUrl}}/api/product?categoryName={{firstCategory}}",
    data: {},
    headers: {
      host: "arch.homework"
    },
    post(response) {
      pm.test("get product categories list successfully", function() {
        pm.response.to.have.status(200);

        pm.expect(responseJson.length).to.eql(2);
      });
    }
  });

  postman[Request]({
    name: "updateBucket",
    id: "4a9db8ea-79eb-4262-b7fc-1b72bfe0c600",
    method: "PUT",
    address: "{{eshopBaseUrl}}/api/bucket/{{userId1}}",
    data:
      '{\r\n    "items": \r\n    [\r\n        {\r\n            "productId": "{{product2}}",\r\n            "quantity": {{product2OrderQuantity}}\r\n        },\r\n        {\r\n            "productId": "{{product3}}",\r\n            "quantity": {{product3OrderQuantity}}\r\n        }\r\n    ]\r\n}',
    headers: {
      host: "arch.homework",
      "X-Custom-Authentification":
        "eyJVc2VySWQiOiJjNjk0ZDQxMi1iMGQ3LTQxNTAtOWM1My04MTQxYzExZmNmNmYiLCJFeHBpcmVkVVRDRGF0ZVRpbWUiOiIyMDIxLTAyLTIyVDIwOjA0OjE5Ljc0MTg2MDNaIn0="
    },
    pre() {
      pm.collectionVariables.set(
        "product2OrderQuantity",
        pm.variables.replaceIn(2)
      );
      pm.collectionVariables.set(
        "product3OrderQuantity",
        pm.variables.replaceIn(3)
      );
    },
    post(response) {
      pm.test("empty bucket", function() {
        pm.response.to.have.status(200);

        const responseJson = pm.response.json();
        pm.expect(responseJson.items.length).to.eql(2);
      });
    }
  });

  postman[Request]({
    name: "getBucket",
    id: "eb7d7f6d-d4df-41d1-a24e-72e455143c9e",
    method: "GET",
    address: "{{eshopBaseUrl}}/api/bucket/{{userId1}}",
    headers: {
      host: "arch.homework",
      "X-Custom-Authentification":
        "eyJVc2VySWQiOiJjNjk0ZDQxMi1iMGQ3LTQxNTAtOWM1My04MTQxYzExZmNmNmYiLCJFeHBpcmVkVVRDRGF0ZVRpbWUiOiIyMDIxLTAyLTIyVDIwOjA0OjE5Ljc0MTg2MDNaIn0="
    },
    post(response) {
      pm.test("filled bucket", function() {
        pm.response.to.have.status(200);

        const responseJson = pm.response.json();

        pm.expect(responseJson.items[0]["quantity"]).to.eql(
          pm.variables.get("product2OrderQuantity")
        );
        pm.expect(responseJson.items[1]["quantity"]).to.eql(
          pm.variables.get("product3OrderQuantity")
        );

        pm.expect(responseJson.items.length).to.eql(2);
      });
    }
  });

  postman[Request]({
    name: "createOrder",
    id: "e1512b5a-2fed-4c00-a977-0740be309284",
    method: "POST",
    address: "{{eshopBaseUrl}}/api/order/{{userId1}}",
    data:
      '{\r\n  "idempotencyKey": "{{idempotencyKey}}",\r\n  "deliveryAddress": "{{deliveryAddress}}"\r\n}',
    headers: {
      host: "arch.homework",
      "X-Custom-Authentification":
        "eyJVc2VySWQiOiJjNjk0ZDQxMi1iMGQ3LTQxNTAtOWM1My04MTQxYzExZmNmNmYiLCJFeHBpcmVkVVRDRGF0ZVRpbWUiOiIyMDIxLTAyLTIyVDIwOjA0OjE5Ljc0MTg2MDNaIn0="
    },
    pre() {
      pm.collectionVariables.set(
        "idempotencyKey",
        pm.variables.replaceIn("{{$randomUUID}}")
      );
      pm.collectionVariables.set(
        "billingId",
        pm.variables.replaceIn("{{$randomUUID}}")
      );
      pm.collectionVariables.set(
        "deliveryAddress",
        pm.variables.replaceIn("{{$randomCity}}" + "{{$randomStreetName}}")
      );
    },
    post(response) {
      var jsonData = JSON.parse(responseBody);
      pm.collectionVariables.set("orderNumber", jsonData["orderNumber"]);

      pm.test("create order succesfully", function() {
        pm.response.to.have.status(200);

        const responseJson = pm.response.json();
        pm.expect(responseJson.status).to.eql(10);
      });
    },
    auth(config, Var) {
      const address = new URI(config.address);
      address.username(`${pm[Var]("userId1")}`);
      address.password(`${pm[Var]("password")}`);
      config.address = address.toString();
      config.options.auth = "basic";
    }
  });

  postman[Request]({
    name: "orderWasPayment",
    id: "95bd21b8-8058-4ed5-b911-5951c1eda40d",
    method: "POST",
    address: "{{eshopBaseUrl}}/api/payment/{{orderNumber}}",
    data:
      '{\r\n  "userId": "{{userId1}}",\r\n  "billingId": "{{billingId}}",\r\n  "paymentDateUtc": "{{paymentDateUtc}}",\r\n  "isSuccessfully": true\r\n}',
    headers: {
      host: "arch.homework",
      "X-Custom-Authentification":
        "eyJVc2VySWQiOiJjNjk0ZDQxMi1iMGQ3LTQxNTAtOWM1My04MTQxYzExZmNmNmYiLCJFeHBpcmVkVVRDRGF0ZVRpbWUiOiIyMDIxLTAyLTIyVDIwOjA0OjE5Ljc0MTg2MDNaIn0="
    },
    pre() {
      pm.collectionVariables.set(
        "paymentDateUtc",
        pm.variables.replaceIn("{{$isoTimestamp}}")
      );
    },
    post(response) {
      pm.test("create order succesfully", function() {
        pm.response.to.have.status(200);

        const responseJson = pm.response.json();
        pm.expect(responseJson.status).to.eql(30);
      });
    },
    auth(config, Var) {
      const address = new URI(config.address);
      address.username(`${pm[Var]("userId1")}`);
      address.password(`${pm[Var]("password")}`);
      config.address = address.toString();
      config.options.auth = "basic";
    }
  });

  postman[Request]({
    name: "getProducts",
    id: "b264ee99-0205-4eae-bae3-5996d7a59f9a",
    method: "GET",
    address: "{{warehouseBaseUrl}}/api/product",
    data: {},
    headers: {
      host: "arch.homework"
    },
    post(response) {
      pm.test("get product list remain count decreased", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
        pm.expect(jsonData[1]["remainCount"]).to.eql(
          pm.variables.get("product2quantity") -
            pm.variables.get("product2OrderQuantity")
        );
        pm.expect(jsonData[2]["remainCount"]).to.eql(
          pm.variables.get("product3quantity") -
            pm.variables.get("product3OrderQuantity")
        );

        pm.collectionVariables.set("product1", jsonData[0]["id"]);
        pm.collectionVariables.set("product2", jsonData[1]["id"]);
        pm.collectionVariables.set("product3", jsonData[2]["id"]);
        pm.collectionVariables.set("product4", jsonData[3]["id"]);

        pm.collectionVariables.set(
          "product1quantity",
          jsonData[0]["remainCount"]
        );
        pm.collectionVariables.set(
          "product2quantity",
          jsonData[1]["remainCount"]
        );
        pm.collectionVariables.set(
          "product3quantity",
          jsonData[2]["remainCount"]
        );
        pm.collectionVariables.set(
          "product4quantity",
          jsonData[3]["remainCount"]
        );
      });
    }
  });

  postman[Request]({
    name: "getNotifications",
    id: "c5e64fdc-1635-4b36-8852-447ad9d60e0a",
    method: "GET",
    address: "{{notificationBaseUrl}}/api/notification/{{userId1}}?skip=3",
    headers: {
      host: "arch.homework"
    },
    pre() {
      setTimeout(function() {}, 4000);
    },
    post(response) {
      pm.test(
        "user has received a notification with success ordering",
        function() {
          pm.response.to.have.status(200);
        }
      );
    },
    auth(config, Var) {
      const address = new URI(config.address);
      address.username(`${pm[Var]("userId1")}`);
      address.password(`${pm[Var]("password")}`);
      config.address = address.toString();
      config.options.auth = "basic";
    }
  });

  postman[Request]({
    name: "getOrderLocation",
    id: "0022d13d-75f3-4253-9676-743b47ef6419",
    method: "GET",
    address: "{{eshopBaseUrl}}/api/order/{{userId1}}/{{orderNumber}}/location",
    headers: {
      host: "arch.homework"
    },
    pre() {
      setTimeout(function() {}, 4000);
    },
    post(response) {
      pm.test("the order is in the warehouse", function() {
        pm.response.to.have.status(200);

        var jsonData = JSON.parse(responseBody);
        pm.expect(jsonData["address"]).to.eql("Склад");
      });
    },
    auth(config, Var) {
      const address = new URI(config.address);
      address.username(`${pm[Var]("userId1")}`);
      address.password(`${pm[Var]("password")}`);
      config.address = address.toString();
      config.options.auth = "basic";
    }
  });

  postman[Request]({
    name: "signout",
    id: "0ec978d5-a3f2-4ee9-8257-68c255917189",
    method: "GET",
    address: "{{baseUrl}}/signout",
    headers: {
      host: "arch.homework"
    },
    post(response) {
      pm.test("set  html", function() {
        var template = pm.response.text(); // save your html response in the template and then
        pm.visualizer.set(template); // set that template to pm.visualizer
      });

      var jsonData = JSON.parse(responseBody);
      pm.collectionVariables.set("product1", jsonData[0]["id"]);
      pm.collectionVariables.set("product2", jsonData[1]["id"]);
      pm.collectionVariables.set("product3", jsonData[2]["id"]);
      pm.collectionVariables.set("product4", jsonData[3]["id"]);

      pm.test("get product list successfully", function() {
        pm.response.to.have.status(200);

        var template = pm.response.text(); // save your html response in the template and then
        pm.visualizer.set(template); // set that template to pm.visualizer
      });
    },
    auth(config, Var) {
      const address = new URI(config.address);
      address.username(`${pm[Var]("userId1")}`);
      address.password(`${pm[Var]("password")}`);
      config.address = address.toString();
      config.options.auth = "basic";
    }
  });
}
